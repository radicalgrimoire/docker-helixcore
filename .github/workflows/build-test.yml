name: build-test

run-name: >
  Build Test: ${{ inputs.dockerfile || 'Dockerfile' }} 
  (${{ github.event_name }})
  by @${{ github.actor }}

on:
  push:
    paths:
      - 'build/**'
      - '.github/workflows/build-test.yml'
  
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Dockerfile to use for building'
        required: false
        default: 'Dockerfile'
        type: string

env:
  # P4 Configuration - non-sensitive settings
  P4ROOT: /opt/perforce/servers/master
  P4NAME: master
  P4PORT: ssl:1666
  P4HOME: /opt/perforce/servers
  CASE_INSENSITIVE: 0

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Display test information
        run: |
          echo "=== Build Test Information ==="
          echo "Event: ${{ github.event_name }}"
          echo "Dockerfile: ${{ inputs.dockerfile || 'Dockerfile' }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""

      - name: Build image
        run: |
          DOCKERFILE_NAME="${{ inputs.dockerfile || 'Dockerfile' }}"
          echo "Building Docker image with $DOCKERFILE_NAME..."
          docker build \
           -t helix-p4d-test \
           --build-arg P4NAME=${{ env.P4NAME }} \
           --build-arg P4PORT=${{ env.P4PORT }} \
           --build-arg P4USER=${{ secrets.P4USER }} \
           --build-arg P4PASSWD=${{ secrets.P4PASSWD }} \
           --build-arg P4HOME=${{ env.P4HOME }} \
           --build-arg P4ROOT=${{ env.P4ROOT }} \
           --build-arg CASE_INSENSITIVE=${{ env.CASE_INSENSITIVE }} \
           -f ./build/$DOCKERFILE_NAME ./build

      - name: Test basic functionality
        run: |
          echo "=== Testing basic functionality ==="
          echo "Testing p4d help command..."
          docker run --rm helix-p4d-test p4d -h || true
          
          echo ""
          echo "Getting P4D version..."
          docker run --rm helix-p4d-test p4d -V || true
          
          echo ""
          echo "Checking installed packages..."
          docker run --rm helix-p4d-test dpkg -l | grep -E "(helix|perforce)" || true

      - name: Check image size
        run: |
          echo "=== Docker Image Size Information ==="
          docker images helix-p4d-test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
          echo ""
          
          # Ë©≥Á¥∞„Çµ„Ç§„Ç∫ÊÉÖÂ†±
          IMAGE_SIZE=$(docker images helix-p4d-test --format "{{.Size}}")
          echo "üìä Image Size: $IMAGE_SIZE"
          
          # ÂúßÁ∏Æ„Çµ„Ç§„Ç∫ÔºàÂÆüÈöõ„ÅÆËª¢ÈÄÅ„Çµ„Ç§„Ç∫„Å´Ëøë„ÅÑÔºâ
          echo "üì¶ Calculating compressed size..."
          docker save helix-p4d-test | gzip | wc -c | awk '{printf "Compressed size: %.2f MB\n", $1/1024/1024}'
          
          # „É¨„Ç§„É§„ÉºÊÉÖÂ†±
          echo ""
          echo "üîç Image layers:"
          docker history helix-p4d-test --format "table {{.Size}}\t{{.CreatedBy}}" | head -10

      - name: Test summary
        run: |
          echo "=== Build Test Completed Successfully ==="
          echo "Docker image built successfully"
          echo "‚úÖ Basic functionality tests passed"
          echo "üìã Dockerfile used: ${{ inputs.dockerfile || 'Dockerfile' }}"
          
          # ÊúÄÁµÇ„Çµ„Ç§„Ç∫ÊÉÖÂ†±„Çí„Çµ„Éû„É™„Éº„Å´Ë°®Á§∫
          IMAGE_SIZE=$(docker images helix-p4d-test --format "{{.Size}}")
          echo "üìä Final image size: $IMAGE_SIZE"
          
          echo ""
          echo "Note: This is a build test only. No images were saved or published."