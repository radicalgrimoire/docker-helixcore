name: build-develop

run-name: >
  ${{ github.event_name == 'schedule' && 'Scheduled Build' || 'Manual Build' }}
  ${{ inputs.dockerfile || 'Dockerfile' }}  
  by @${{ github.actor }}

on:
  schedule:
    # JST 朝9時 = UTC 0時（JST = UTC + 9時間）
    - cron: '0 0 * * *'
  
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Dockerfile to use for building'
        required: false
        default: 'Dockerfile'
        type: string
 
jobs:
  # Display commit information
  info:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Display build information
        run: |
          echo "Build Information:"
          echo "Event: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          # Get last commit author and message
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an" HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s" HEAD)
          echo "Auther: ${COMMIT_AUTHOR} / ${COMMIT_MESSAGE}"

  # Check if today is the designated day to push (Monday) or if manually triggered.
  # Uses external reusable workflow for day checking logic
  check-day:
    needs: info
    uses: radicalgrimoire/github-actions-utils/.github/workflows/check-schedule-day.yml@main
    with:
      schedule_type: 'weekly'
      target_value: '1'      # Monday
      timezone: 'Asia/Tokyo'

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # if: github.event_name == 'push' || github.event_name == 'pull_request'
  test:
    needs: [info, check-day]
    uses: ./.github/workflows/test.yml
    with:
      # スケジュール実行時はDockerfile、手動実行時は選択されたファイルを使用
      docker_files_name: ${{ inputs.dockerfile || 'Dockerfile' }}
      should_push: ${{ needs.check-day.outputs.should-push }}
    secrets: inherit

  # P4Dバージョン取得ステップ
  get-version:
    needs: [check-day, test]
    if: needs.check-day.outputs.should-push == 'true'
    uses: ./.github/workflows/get-version.yml
    secrets: inherit

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  # TAG_SUFFIX="nightly-$(date +'%Y%m%d')"
  push:
    uses: ./.github/workflows/publish.yml
    needs: [check-day, get-version]
    if: needs.check-day.outputs.should-push == 'true'
    with:
      version: ${{ needs.get-version.outputs.version }}
      version_raw: ${{ needs.get-version.outputs.version_raw }}
    secrets: inherit

  # Create issue on failure
  create-failure-issue:
    runs-on: ubuntu-latest
    if: always() && (needs.test.result == 'failure' || needs.get-version.result == 'failure' || needs.push.result == 'failure')
    needs: [info, check-day, test, get-version, push]
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const failedJobs = [];
            const needs = ${{ toJSON(needs) }};
            
            // 失敗したジョブを特定
            if (needs.test?.result === 'failure') failedJobs.push('test');
            if (needs['get-version']?.result === 'failure') failedJobs.push('get-version');  
            if (needs.push?.result === 'failure') failedJobs.push('push');
            
            const triggerType = '${{ github.event_name }}' === 'schedule' ? 'スケジュール実行' : '手動実行';
            const dockerfile = '${{ inputs.dockerfile || 'Dockerfile' }}';
            const currentDate = new Date().toLocaleDateString('ja-JP');
            const currentDateTime = new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
            
            // issueのタイトルと本文を作成
            const title = '🚨 Build Failed: ' + triggerType + ' (' + currentDate + ')';
            const failedJobsList = failedJobs.map(job => '- `' + job + '`').join('\n');
            
            // 本文を段階的に作成
            let body = '## ビルド失敗レポート\n\n';
            body += '**実行情報:**\n';
            body += '- トリガー: ' + triggerType + '\n';
            body += '- Dockerfile: `' + dockerfile + '`\n';
            body += '- ブランチ: `${{ github.ref_name }}`\n';
            body += '- コミット: `${{ github.sha }}`\n';
            body += '- 実行者: @${{ github.actor }}\n';
            body += '- 実行時刻: ' + currentDateTime + ' JST\n\n';
            body += '**失敗したジョブ:**\n';
            body += failedJobsList + '\n\n';
            body += '**ワークフロー実行:**\n';
            body += '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n';
            body += '**対応が必要な項目:**\n';
            body += '- [ ] エラーログの確認\n';
            body += '- [ ] 失敗原因の特定\n';
            body += '- [ ] 修正作業\n';
            body += '- [ ] 動作確認\n\n';
            body += '_このissueは自動的に作成されました。修正完了後はcloseしてください。_';

            try {
              const issue = await github.rest.issues.create({
                owner: 'radicalgrimoire',
                repo: 'docker-helixcore',
                title: title,
                body: body,
                labels: ['bug', 'build-failure', 'auto-created'],
                assignees: ['radicalgrimoire']
              });
              
              console.log('Issue created: ' + issue.data.html_url);
            } catch (error) {
              console.error('Failed to create issue:', error);
              // issueの作成に失敗してもワークフロー全体は失敗させない
            }
